---
description:
globs:
alwaysApply: true
---
---
description: Process rules for iterative implementation and refactoring in vibe coding workflows.
alwaysApply: true
---

# Work Process Rules

- Always separate different types of tasks (e.g., rule changes, environment setup, feature implementation) into distinct commits.
- Before starting a new task:
  1. Check for uncommitted changes using `git status`
  2. If changes exist, commit them first
  3. Only proceed with new tasks after all changes are committed
- After completing each task:
  1. Create a commit with a descriptive message
  2. Present the next possible tasks for review
  3. Wait for user approval before proceeding
- When multiple changes are needed:
  1. Break them down into smaller, independent tasks
  2. Complete and commit each task separately
  3. Maintain a clear separation between different types of changes

# Implementation Process Rules

- Limit the scope of each implementation task as much as possible; implement only one small feature or change at a time.
- Alternate between implementation phases and refactoring phases.
- During implementation phases:
  - Prioritize getting things working over abstraction or unification with existing code.
  - Do not focus on code reuse or generalization at this stage.
  - Always write appropriate tests for any new code.
- During refactoring phases:
  - Focus exclusively on improving code structure, readability, and maintainability.
  - Do not add new features or change existing functionality.
- After completing each phase (implementation or refactoring), always create a commit to record the changes.
- Prefer end-to-end tests for user-facing features, but include unit tests as needed.
- Avoid accumulating large, unreviewed changes; keep iterations small and frequent.

# Branch Management Rules

## Branch Naming Convention
- `main`: Production branch
- `dev`: Development branch
- `feature/*`: Feature development branches
- `fix/*`: Bug fix branches
- `docs/*`: Documentation update branches

## Branch Operation Rules
1. **Basic Rules**
   - Keep `main` branch always deployable
   - Develop new features in `feature/*` branches
   - Fix bugs in `fix/*` branches
   - Update documentation in `docs/*` branches

2. **Branch Creation**
   - Create new branches from `dev`
   - Use descriptive branch names
   - One feature/fix per branch

3. **Merge Rules**
   - Merge feature branches to `dev` after completion
   - Merge `dev` to `main` after testing
   - Create pull requests for all merges
   - Include clear descriptions in pull requests

4. **Commit Rules**
   - Use clear commit messages
   - Use prefixes to indicate change type:
     - `feat:` New features
     - `fix:` Bug fixes
     - `docs:` Documentation updates
     - `style:` Code style changes
     - `refactor:` Refactoring
     - `test:` Test additions/modifications
     - `chore:` Other changes

5. **Protection Rules**
   - No direct pushes to `main`
   - Require at least one review for pull requests
   - Require passing tests before merge

# Dev Container Rules

1. **Configuration Changes**
   - When modifying dev container configuration (Dockerfile, compose.yml, etc.):
     - Do not commit changes immediately
     - Present the changes for review
     - Wait for user approval before proceeding
     - Changes should be tested in the current session

2. **Authentication and Secrets**
   - Handle authentication tokens and secrets through environment variables
   - Do not commit sensitive information
   - Document the required environment variables
   - Use volume mounts for persistent authentication when appropriate

3. **Container State**
   - Be aware that container state is temporary
   - Document any manual setup steps required after container restart
   - Consider persistent storage solutions for development data
