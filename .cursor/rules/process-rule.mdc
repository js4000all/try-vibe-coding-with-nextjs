---
description: Process rules for iterative implementation and refactoring in vibe coding workflows.
globs:
alwaysApply: true
---
# Work Process Rules

- Always separate different types of tasks (e.g., rule changes, environment setup, feature implementation) into distinct commits.
- Before starting a new task:
  1. Check for uncommitted changes using `git status`
  2. If changes exist, commit them first
  3. Only proceed with new tasks after all changes are committed
- After completing each task:
  1. Create a commit with a descriptive message
  2. Present the next possible tasks for review
  3. Wait for user approval before proceeding
- When multiple changes are needed:
  1. Break them down into smaller, independent tasks
  2. Complete and commit each task separately
  3. Maintain a clear separation between different types of changes

# Implementation Process Rules

- Limit the scope of each implementation task as much as possible; implement only one small feature or change at a time.
- Alternate between implementation phases and refactoring phases.

## Implementation Phase
1. Write tests first (Test-Driven Development)
   - Create test file
   - Write test cases
   - Run tests (should fail)
2. Implement the feature
   - Create/update component
   - Implement functionality
3. Run tests again
   - Verify all tests pass
4. Commit and push changes
   - Use descriptive commit message
   - Push to feature branch

## Refactoring Phase
1. Run existing tests
   - Verify current state
   - Document test results
2. Perform refactoring
   - Improve code structure
   - Enhance readability
   - Maintain functionality
3. Run tests again
   - Verify no regressions
   - All tests should pass
4. Commit and push changes
   - Use descriptive commit message
   - Push to feature branch

- During implementation phases:
  - Prioritize getting things working over abstraction or unification with existing code.
  - Do not focus on code reuse or generalization at this stage.
  - Always write appropriate tests for any new code.
- During refactoring phases:
  - Focus exclusively on improving code structure, readability, and maintainability.
  - Do not add new features or change existing functionality.
- After completing each phase (implementation or refactoring), always create a commit to record the changes.
- Prefer end-to-end tests for user-facing features, but include unit tests as needed.
- Avoid accumulating large, unreviewed changes; keep iterations small and frequent.

# Branch Management Rules

## Branch Naming Convention
- `main`: Production branch
- `dev`: Development branch
- `milestone/*`: Milestone-specific work branches
  - Example: `milestone/nextjs-init`, `milestone/auth-system`

## Branch Operation Rules
1. **Basic Rules**
   - Keep `main` branch always deployable
   - Create new milestone work in `milestone/*` branches
   - Use one branch per milestone
   - Branch switching is strictly controlled by user instructions

2. **Branch Creation**
   - Create new branches from `dev`
   - Branch names must clearly indicate milestone content
   - Complete one milestone per branch
   - Do not create branches without explicit user instruction

3. **Merge Rules**
   - Merge milestone branches to `dev` after completion
   - Merge `dev` to `main` after testing
   - Create pull requests for all merges
   - Include clear descriptions in pull requests

4. **Commit Rules**
   - Use clear commit messages
   - Use prefixes to indicate change type:
     - `feat:` New features
     - `fix:` Bug fixes
     - `docs:` Documentation updates
     - `style:` Code style changes
     - `refactor:` Refactoring
     - `test:` Test additions/modifications
     - `chore:` Other changes

5. **Protection Rules**
   - No direct pushes to `main`
   - Require at least one review for pull requests
   - Require passing tests before merge

# Dev Container Rules

1. **Configuration Changes**
   - When modifying dev container configuration (Dockerfile, compose.yml, etc.):
     - Do not commit changes immediately
     - Present the changes for review
     - Wait for user approval before proceeding
     - Changes should be tested in the current session

2. **Authentication and Secrets**
   - Handle authentication tokens and secrets through environment variables
   - Do not commit sensitive information
   - Document the required environment variables
   - Use volume mounts for persistent authentication when appropriate

3. **Container State**
   - Be aware that container state is temporary
   - Document any manual setup steps required after container restart
   - Consider persistent storage solutions for development data

# Pull Request Process

1. **Before Creating PR**
   - Ensure all changes are committed and pushed
   - Run tests and verify functionality
   - Update documentation if needed
   - Check for any merge conflicts

2. **PR Creation Steps**
   - Use `gh pr create` command with appropriate options:
     ```bash
     gh pr create \
       --title "feat: implement feature X" \
       --body "## Changes
       - Implemented feature X
       - Added tests
       - Updated documentation

       ## Testing
       - [ ] Unit tests passed
       - [ ] E2E tests passed
       - [ ] Manual testing completed

       ## Related Issues
       - Closes #123" \
       --base dev \
       --label "enhancement" \
       --reviewer "js4000all"
     ```

3. **PR Description Template**
   - Title: Clear and descriptive
   - Body:
     - Changes made
     - Testing performed
     - Related issues
     - Screenshots (if applicable)
     - Deployment notes (if applicable)

4. **After PR Creation**
   - Monitor CI/CD status
   - Address any automated checks
   - Update PR if needed

5. **PR Review Process**
   - Address review comments promptly
   - Update PR as needed
   - Keep PR up to date with base branch
   - Squash commits if requested
